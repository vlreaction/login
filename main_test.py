# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'giaodien.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import traceback
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, QRunnable, QThreadPool, QTimer, QTime, Qt, pyqtSignal, pyqtSlot 
import os
import pyaudio
import wave
from scoring import test

countDownTime =  6

class Worker(QRunnable):
    '''
    Worker thread

    Inherits from QRunnable to handler worker thread setup, signals and wrap-up.

    :param callback: The function callback to run on this worker thread. Supplied args and
                     kwargs will be passed through to the runner.
    :type callback: function
    :param args: Arguments to pass to the callback function
    :param kwargs: Keywords to pass to the callback function

    '''

    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()

        # Store constructor arguments (re-used for processing)
        self.fn = fn
        self.args = args
        self.kwargs = kwargs
        self.signals = WorkerSignals()

        # Add the callback to our kwargs
        self.kwargs['progress_callback'] = self.signals.progress

    @pyqtSlot()
    def run(self):
        '''
        Initialise the runner function with passed args, kwargs.
        '''

        # Retrieve args/kwargs here; and fire processing using them
        try:
            result = self.fn(*self.args, **self.kwargs)
        except:
            traceback.print_exc()
            exctype, value = sys.exc_info()[:2]
            self.signals.error.emit((exctype, value, traceback.format_exc()))
        else:
            self.signals.result.emit(result)  # Return the result of the processing
        finally:
            self.signals.finished.emit()  # Done

class WorkerSignals(QObject):
    '''
    Defines the signals available from a running worker thread.

    Supported signals are:

    finished
        No data

    error
        `tuple` (exctype, value, traceback.format_exc() )

    result
        `object` data returned from processing, anything

    progress
        `int` indicating % progress

    '''
    finished = pyqtSignal()
    error = pyqtSignal(tuple)
    result = pyqtSignal(object)
    progress = pyqtSignal(int)
    
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(412, 486)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 10, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.calcBtn_2 = QtWidgets.QPushButton(self.centralwidget)
        self.calcBtn_2.setGeometry(QtCore.QRect(140, 120, 141, 41))
        self.calcBtn_2.setObjectName("calcBtn_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(140, 10, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 70, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 412, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # event
        self.calcBtn_2.clicked.connect(self.loginFunc)
  
        # creating a timer object 
        self.timer=QTimer()
        # adding action to timer 
        self.timer.timeout.connect(self.showTime) 
        # update the timer every second 
        self.timer.start(1000) 

        # creating a timer object 
        self.timer1=QTimer()
        # adding action to timer 
        self.timer1.timeout.connect(self.countDown)

        # thread pool
        self.threadpool = QThreadPool()
        print("Multithreading with maximum %d threads" % self.threadpool.maxThreadCount())


    def countDown(self): 
        global countDownTime
        countDownTime -=1
        self.label_3.setText("Đang thu âm...:{}".format(countDownTime)) 
        if countDownTime <= 0:
            self.timer1.stop()
            countDownTime = 6

    def oh_no(self):
        # Pass the function to execute
        worker = Worker(self.recordAudio) # Any other args, kwargs are passed to the run function
        worker.signals.result.connect(self.print_output)
        worker.signals.finished.connect(self.loginSuccess)
        worker.signals.progress.connect(self.progress_fn)

        # Execute
        self.threadpool.start(worker)

    def progress_fn(self):
        _translate = QtCore.QCoreApplication.translate
        self.label_3.setText(_translate("MainWindow", "Đang thu âm..."))

    def print_output(self):
        _translate = QtCore.QCoreApplication.translate
        self.label_3.setText(_translate("MainWindow", "Vui lòng đợi giây lát..."))       

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ứng dụng đăng nhập bằng giọng nói"))
        self.label.setText(_translate("MainWindow", "Bây giờ là:"))
        self.calcBtn_2.setText(_translate("MainWindow", "Login"))
        self.label_2.setText(_translate("MainWindow", "..."))
        self.label_3.setText(_translate("MainWindow", "Vui lòng đăng nhập để tiếp tục..."))

    # method called by timer 
    def showTime(self): 
        # getting current time 
        current_time = QTime.currentTime() 
        # converting QTime object to string 
        label_time = current_time.toString('hh:mm:ss') 
        # showing it to the label 
        self.label_2.setText(label_time) 

    def loginFunc(self):
        """
        Hàm gọi đăng nhập
        """
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setText("Xin chào!")
        msg.setInformativeText("Bấm OK và bắt đầu nói.")
        msg.setWindowTitle("Đăng nhập")
        msg.exec_()
        # update the timer every second 
        self.timer1.start(1000) 
        self.oh_no()

    def loginSuccess(self):
        """
        Hàm gọi đăng nhập
        """
        _translate = QtCore.QCoreApplication.translate
        self.label_3.setText(_translate("MainWindow", "Vui lòng đợi giây lát..."))
        result_dict = test()
        if result_dict['value'] < 0.3:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("Chào {} !".format(result_dict['name']))
            msg.setInformativeText("Chào mừng trở lại.")
            msg.setWindowTitle("Đăng nhập thành công")
            msg.exec_()
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("Thất bại")
            msg.setInformativeText("Xin vui lòng thử lại.")
            msg.setWindowTitle("Đăng nhập không thành công")
            msg.exec_()
    
    def recordAudio(self, progress_callback):       
        FORMAT = pyaudio.paInt16
        CHANNELS = 2
        RATE = 16000
        CHUNK = 1024
        RECORD_SECONDS = 6
        WAVE_OUTPUT_FILENAME = "data/wav/test/login.wav"
        audio = pyaudio.PyAudio()

        # start Recording
        stream = audio.open(format=FORMAT, channels=CHANNELS,
                        rate=RATE, input=True,
                        frames_per_buffer=CHUNK)
        progress_callback.emit("recording...")
        print("recording...")
        frames = []
        
        for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
            data = stream.read(CHUNK)
            frames.append(data)
        print("finished recording")
        progress_callback.emit("finished recording")
        
        # stop Recording
        stream.stop_stream()
        stream.close()
        audio.terminate()
        
        waveFile = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
        waveFile.setnchannels(CHANNELS)
        waveFile.setsampwidth(audio.get_sample_size(FORMAT))
        waveFile.setframerate(RATE)
        waveFile.writeframes(b''.join(frames))
        waveFile.close()
        return "Done."

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
